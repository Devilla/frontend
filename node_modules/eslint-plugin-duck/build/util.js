'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findInProperties = findInProperties;
exports.getPropertiesOfSecondArgumentOf = getPropertiesOfSecondArgumentOf;
exports.getActionType = getActionType;
exports.isDefineActionCall = isDefineActionCall;
function firstArgumentIsActionType(node) {
  return (node.arguments || []).length && (node.arguments[0].type === 'Identifier' || node.arguments[0].type === 'Literal');
}

function secondArgumentIsObject(node) {
  return (node.arguments || []).length > 1 && node.arguments[1].type === 'ObjectExpression';
}

function findInProperties() {
  var properties = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
  var name = arguments[1];

  return properties.find(function (property) {
    return property.key.name === name;
  });
}

function getPropertiesOfSecondArgumentOf() {
  var node = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return (node.arguments || []).length > 1 && node.arguments[1].properties;
}

function getActionType(node) {
  return (node.arguments || []).length && node.arguments[0];
}

function isDefineActionCall(node) {
  if (node.type !== 'CallExpression') {
    return false;
  }
  if (node.callee.type === 'MemberExpression') {
    var propertyName = node.callee.property.name;
    if (propertyName === 'defineAction') {
      return firstArgumentIsActionType(node) && secondArgumentIsObject(node);
    }
  }
  return false;
}