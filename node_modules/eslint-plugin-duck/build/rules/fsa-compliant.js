'use strict';

var _fuse = require('fuse.js');

var _fuse2 = _interopRequireDefault(_fuse);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function (context) {
  var errors = [];

  var fsaKeys = ['payload', 'meta', 'error', 'type'];
  var fuse = new _fuse2.default(fsaKeys.map(function (k) {
    return { k: k };
  }), { keys: ['k'], id: 'k' });
  var creatorName = context.options[0] || 'creator';

  /**
   * Report errors
   */
  function reportErrors() {
    errors.forEach(function (_ref) {
      var node = _ref.node;
      var closest = _ref.closest;

      var message = 'Action key \'' + node.key.name + '\' is invalid';
      if (closest) {
        message += '. Do you mean "' + closest + '"?';
      }
      context.report(node, message);
    });
  }

  function checkKeys(keys) {
    keys.forEach(function (prop) {
      if (fsaKeys.indexOf(prop.key.name) === -1) {
        var closest = fuse.search(prop.key.name)[0];
        errors.push({ node: prop, closest: closest });
      }
    });
  }

  return {
    CallExpression: function CallExpression(node) {
      if (!(0, _util.isDefineActionCall)(node)) {
        return;
      }
      var properties = (0, _util.getPropertiesOfSecondArgumentOf)(node);
      var creator = (0, _util.findInProperties)(properties, creatorName);
      if (!creator || !creator.value || !creator.value.body || !creator.value.body.body || !creator.value.body.body) {
        return;
      }
      var action = creator.value.body.body.find(function (statement) {
        return statement.type === 'ReturnStatement';
      });
      if (!action || action.argument.type !== 'ObjectExpression') {
        return;
      }
      checkKeys(action.argument.properties);
      reportErrors();
    }
  };
};

module.exports.schema = [{
  type: 'string'
}];